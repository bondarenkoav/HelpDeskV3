from django.contrib.auth.models import User
from django.db import models
from django_currentuser.db.models import CurrentUserField
from django.urls import reverse

from base.models import Profile, RoutesMaintenance
from base.models import ServiceCompany, ModelTransmitter, TypeSecurity, Status, Client, \
    TypeRequest, TypeDocument


def exploitation_type_request():
    return TypeRequest.objects.get(slug='exploitation')


def exploitation_type_document():
    return TypeDocument.objects.get(slug='request')


def exploitation_status_request():
    return Status.objects.get(slug='open')


class ExploitationProposal(models.Model):
    service_company = models.ForeignKey(ServiceCompany, verbose_name='Организация', on_delete=models.CASCADE)

    type_request = models.ForeignKey(TypeRequest, models.SET_NULL, verbose_name='Тип заявки',
                                     default=exploitation_type_request, null=True)
    type_document = models.ForeignKey(TypeDocument, models.SET_NULL, verbose_name='Тип документа',
                                      default=exploitation_type_document, null=True)
    type_security = models.ManyToManyField(TypeSecurity, verbose_name='Тип сигнализации',
                                           help_text="Выбор нескольких позиций c нажатой кнопкой Ctrl")

    object_number = models.CharField(u'№ объекта', max_length=10)
    object_address = models.CharField(u'Адрес объекта', max_length=300)

    transmitter_model = models.ForeignKey(ModelTransmitter, models.SET_NULL,
                                          verbose_name='Модель передатчика', null=True, blank=True)
    transmitter_number = models.CharField(u'Номер передатчика', max_length=15, null=True, blank=True)

    client_words = models.CharField(u'Наименование', max_length=100, blank=True, null=True)
    client_choices = models.ForeignKey(Client, models.SET_NULL, verbose_name='Контрагент', blank=True, null=True,
                                       help_text="Обязательно для заполнения перед закрытием заявки")

    descript_troubles = models.TextField(u'Вид неисправности')
    descript_work = models.TextField(u'Что сделали', blank=True)

    coworkers = models.ManyToManyField(Profile, verbose_name='Исполнитель', blank=True)
    status = models.ForeignKey(Status, models.SET_NULL, verbose_name='Статус заявки',
                               default=exploitation_status_request, null=True)
    required_act = models.BooleanField(u'Требуется акт', default=False)
    written_act = models.BooleanField(u'Акт выписан', default=False)
    high_importance = models.BooleanField(u'Высокая важность', default=False)

    rout = models.ForeignKey(RoutesMaintenance, models.SET_NULL,
                             verbose_name=u'Привязка к маршруту ТО', null=True, blank=True)

    date_schedule = models.DateField(u'Запланировано на:', null=True, blank=True)
    date_work = models.DateField(u'Дата исполнения', null=True, blank=True)
    date_act = models.DateField(u'Дата предоставления акта', null=True, blank=True)

    date_time_add = models.DateTimeField(u'Дата и время добавления', auto_now_add=True)
    date_time_upd = models.DateTimeField(u'Дата и время обновления', auto_now=True)

    create_user = CurrentUserField(on_update=False, related_name='ep_creator')
    update_user = CurrentUserField(on_update=True, related_name='ep_modifying')

    @classmethod
    def create(cls, request):
        service_company = Profile.objects.get(user=request.user).current_scompany
        return service_company

    def __str__(self):
        return self.object_number + ' (' + self.object_address + ')'

    def get_absolute_url(self):
        return reverse('exploitation:upd-manage-proposal', kwargs={'pk': self.pk})

    class Meta:
        app_label = 'exploitation'
        verbose_name = u'Заявка '
        verbose_name_plural = u'Список заявок '
        permissions = (
            ('custom_add', u'Добавить заявку'),
            ('custom_view', u'Просмотреть заявку'),
            ('custom_change', u'Изменить заявку'),
            ('change_akt', u'поле.Акт'),
            ('change_client', u'поле.Client'),
            ('change_status', u'поле.Статус'),
            ('change_transmitter', u'поле.Передатчик'),
        )
