from django.utils import timezone
from django import forms

from easy_select2 import Select2Multiple

from exploitation.models import ExploitationProposal
from helpdesk.widgets import SelectWidget
from base.models import Profile, Status

__author__ = 'ipman'


class EProposalCreateForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super(EProposalCreateForm, self).__init__(*args, **kwargs)
        self.user = kwargs['initial'].pop('user', None)
        self.fields['date_schedule'].initial = timezone.localtime(timezone.now()).date()
        self.fields['coworkers'].queryset = self.user.profile.executors

    object_address = forms.CharField(label=u'Адрес объекта',
                                     widget=forms.widgets.TextInput(attrs={'id': 'id_AddressObject',
                                                                           'style': 'padding: 0px'}))
    date_schedule = forms.DateField(required=False, label='Запланировано на', input_formats=('%Y-%m-%d',),
                                    widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),)
    descript_trouble = forms.CharField(required=False, label='Неисправность',
                                       widget=forms.widgets.Textarea(attrs={'rows': 3}))
    coworkers = forms.ModelMultipleChoiceField(required=False, label='Исполнители', queryset=Profile.objects.all(),
                                               widget=forms.SelectMultiple(attrs={'class': 'multiselect'}))

    class Meta:
        model = ExploitationProposal
        fields = ['object_number', 'object_address', 'client_words', 'descript_trouble', 'date_schedule', 'coworkers']


class EProposalUpdateManagerForm(forms.ModelForm):

    def __init__(self, *args, **kwargs):
        super(EProposalUpdateManagerForm, self).__init__(*args, **kwargs)
        instance = getattr(self, 'instance', None)
        self.user = kwargs['initial'].pop('user', None)

        self.fields['status'].queryset = Status.objects.exclude(slug__in=['scheduled']).order_by('id')
        self.fields['status'].widget.disabled_choices = [1, 3]
        if instance.status.slug not in ['open', 'control', 'transfer']:
            self.fields['required_act'].required = False
            self.fields['required_act'].widget.attrs['disabled'] = 'disabled'
            self.fields['date_act'].required = False
            self.fields['date_act'].widget.attrs['disabled'] = 'disabled'
        self.fields['coworkers'].queryset = self.user.profile.executors

    date_schedule = forms.DateField(required=False, label='Выполнить', input_formats=('%Y-%m-%d',),
                                    widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),)
    date_work = forms.DateField(required=False, label='Выполнено', input_formats=('%Y-%m-%d',),
                                widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),)
    date_act = forms.DateField(required=False, label='Дата', input_formats=('%Y-%m-%d',),
                               widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),)
    descript_work = forms.CharField(required=False, label='Описание выполненных работ',
                                    widget=forms.widgets.Textarea(attrs={'rows': 5}))
    status = forms.ModelChoiceField(required=False, label='Состояние', widget=SelectWidget,
                                    queryset=Status.objects.all())
    coworkers = forms.ModelMultipleChoiceField(required=False, label='Исполнители', queryset=Profile.objects.all(),
                                               widget=Select2Multiple())

    class Meta:
        model = ExploitationProposal
        fields = ['date_schedule', 'descript_work', 'date_work', 'coworkers', 'status', 'required_act', 'date_act']


# class EproposalEngineerForm(ModelForm):
#
#     def __init__(self, *args, **kwargs):
#         super(EproposalEngineerForm, self).__init__(*args, **kwargs)
#
#         self.fields['DescriptWorks'].widget.attrs['rows'] = 4
#         self.fields['Status'].queryset = Status.objects.filter(slug__in=['open', 'complete', 'not_fulfilled'])
#
#     DateTime_work = forms.DateField(required=False, label='Дата выполнения',
#                                     widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),
#                                     input_formats=('%Y-%m-%d',))
#
#     class Meta:
#         model = ExploitationProposal
#         fields = ['DescriptWorks', 'WrittenAct', 'Status']
