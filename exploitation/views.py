import logging
import re
from datetime import datetime

from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import FormView, UpdateView, DetailView
from django.views.generic.list import ListView

from exploitation.apps import ExploitationConfig
from exploitation.forms import *
from exploitation.models import ExploitationProposal
from base.models import Event, Status, Profile, TypeRequest

logger = logging.getLogger(__name__)

events = Event.objects.all()

app = ExploitationConfig.name
app_name = 'Эксплуатация'


class EProposalList(LoginRequiredMixin, ListView, FormView):
    template_name = "exploitation/exploitation_list.html"
    form_class = EProposalCreateForm
    success_url = reverse_lazy('exploitation:getlist_proposals', args=['open'])
    paginate_by = 5

    def get_form_kwargs(self):
        kwargs = super(EProposalList, self).get_form_kwargs()
        kwargs.update({'initial': {'user': self.request.user}})
        return kwargs

    def get_context_data(self, **kwargs):
        context = super(EProposalList, self).get_context_data(**kwargs)
        curr_status = self.kwargs['status'] if self.kwargs['status'] else 'open'
        context["status"] = Status.objects.get(slug=curr_status)
        context["app_name"] = app_name
        context["type_document"] = "Заявки"
        context["list_status"] = Status.objects.exclude(slug=curr_status)
        return context

    def get_queryset(self):
        proposals = ExploitationProposal.objects.filter(
            service_company=Profile.objects.get(user=self.request.user).current_scompany)
        if self.kwargs['status'] == 'open':
            qs = proposals.filter(
                status__slug__in=['open', 'complete'], date_schedule__lte=datetime.today())
        elif self.kwargs['status'] == 'scheduled':
            qs = proposals.filter(
                status__slug__in=['open', 'complete'], date_schedule__gt=datetime.today())
        else:
            qs = proposals.filter(
                status__slug=self.kwargs['status'], date_schedule__year=datetime.today().year)
        return qs

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.service_company = Profile.objects.get(user=self.request.user).current_scompany
        self.object.NumObject = re.sub(r'[.]', '', form.cleaned_data['object_num']) if form.cleaned_data['object_num'] != '' else ''
        self.object.save()
        return super(EProposalList, self).form_valid(form)

    def form_invalid(self, form):
        return self.render_to_response(self.get_context_data(form=form, context_key='Form is not valid'))


class EProposalUpdate(LoginRequiredMixin, UpdateView):
    model = ExploitationProposal
    template_name = 'exploitation/exploitation_upd.html'
    form_class = EProposalUpdateManagerForm
    # success_url = reverse_lazy('close_tab')

    def get_form_kwargs(self):
        kwargs = super(EProposalUpdate, self).get_form_kwargs()
        kwargs.update({'initial': {'user': self.request.user}})
        return kwargs

    def get_context_data(self, **kwargs):
        context = super(EProposalUpdate, self).get_context_data(**kwargs)
        proposal = get_object_or_404(ExploitationProposal, pk=self.kwargs['pk'])
        context["app_name"] = app_name
        context["proposal"] = proposal

        return context

    def form_valid(self, form):
        return super().form_valid(form)

    def form_invalid(self, form):
        return self.render_to_response(self.get_context_data(form=form, context_key='Form is not valid'))


class EProposalDetail(LoginRequiredMixin, DetailView):
    model = ExploitationProposal
    template_name = 'exploitation/exploitation_detail.html'

    def get_context_data(self, **kwargs):
        context = super(EProposalDetail, self).get_context_data(**kwargs)
        proposal = get_object_or_404(EProposalDetail, pk=self.kwargs['pk'])
        context["proposal"] = proposal
        return context


# class EProposalEngineerList(LoginRequiredMixin, ListView):
#     template_name = "mobile_request_list.html"
#     paginate_by = 5
#
#     def get_context_data(self, **kwargs):
#         context = super(EProposalEngineerList, self).get_context_data(**kwargs)
#         context["status"] = Status.objects.get(slug=self.kwargs['status'])
#         return context
#
#     def get_queryset(self):
#         qs = eproposals.objects.filter(
#             Status__slug__in=['open', 'transfer', 'control'], CoWorkers=self.request.user,
#             DateSchedule=datetime.now().date()).order_by('-id')
#         return qs
#
#
# class EProposalEngineerUpdate(LoginRequiredMixin, UpdateView):
#     model = eproposals
#     template_name = 'eproposals_upd.html'
#     form_class = EproposalEngineerForm
#     success_url = reverse_lazy('getlist-engineer-proposals')
#
#     def get_form_kwargs(self):
#         kwargs = super(EProposalEngineerUpdate, self).get_form_kwargs()
#         kwargs.update({'initial': {'user': self.request.user}})
#         return kwargs
#
#     def get_context_data(self, **kwargs):
#         context = super(EProposalEngineerUpdate, self).get_context_data(**kwargs)
#         proposal = get_object_or_404(eproposals, pk=self.kwargs['pk'])
#         context["proposal"] = proposal
#         return context
#
#     def form_valid(self, form):
#         self.object = form.save(commit=False)
#         self.object.DateWork = timezone.localtime(timezone.now()).date()
#         self.object.save()
#         return super().form_valid(form)
#
#     def form_invalid(self, form):
#         return self.render_to_response(self.get_context_data(form=form, context_key='Form is not valid'))